# Contribuindo para o ByteAssist

Obrigado por considerar contribuir para o ByteAssist! Este documento descreve o fluxo de trabalho e as diretrizes para ajudar voc√™ a contribuir de forma eficaz.

---

## Estrat√©gia de Branches

Utilizamos as seguintes branches para o desenvolvimento:

- **Main**: A branch de produ√ß√£o. O c√≥digo aqui √© est√°vel e est√° em produ√ß√£o.
- **Dev**: A branch de desenvolvimento. Novas funcionalidades e corre√ß√µes s√£o integradas aqui antes de serem mescladas na `Main`.

### Nomea√ß√£o de Branches

Para manter o reposit√≥rio organizado e facilitar a colabora√ß√£o, siga as conven√ß√µes abaixo ao nomear suas branches:
- Formato geral: <tipo>/<descri√ß√£o-breve>
    - **tipo:** Indica o prop√≥sito da branch, como feature, bugfix, ou hotfix.
    - **descri√ß√£o-breve:** Uma descri√ß√£o curta e clara do que ser√° implementado ou corrigido.

#### Exemplos de Nomes Corretos:
- feature/login-page
- bugfix/fix-typo
- hotfix/urgent-issue
- release/v1.0.0
- docs/update-readme

#### Exemplos de Nomes Incorretos:
- Feature/login-page (a palavra inicial deve estar em min√∫sculas)
- bugfix/ (falta o nome ap√≥s a barra)
- hotfix/123_invalid (caracteres inv√°lidos como _, aceita somente alfanum√©ricos e -)
- release-v1.0.0 (falta a barra / ap√≥s a palavra inicial)

### Nomea√ß√£o de Commits e Pull Requests

As mensagens de commit e pull requests devem seguir este padr√£o:
`<tipo>(<escopo opcional>): <resumo>`

- <tipo>: Um dos valores permitidos: feat, fix, refactor, style, test, docs, chore.
- <escopo opcional>: Um contexto espec√≠fico entre par√™nteses (opcional).
- <resumo>: Uma breve descri√ß√£o do commit (obrigat√≥rio).
- <descri√ß√£o opcional>: Detalhes adicionais em linhas subsequentes (opcional).

#### Exemplos Corretos: 
- feat(api): adiciona suporte a autentica√ß√£o
- fix: corrige erro no carregamento de dados
- docs(readme): atualiza instru√ß√µes de instala√ß√£o
- test: adiciona testes para valida√ß√£o de entrada

#### Exemplos Incorretos:
- feature: adiciona nova funcionalidade (sem o tipo correto, deve ser feat)
- fix(api): (O resumo n√£o pode estar vazio)
- docs:Atualiza documenta√ß√£o (sem espa√ßo ap√≥s os dois pontos)
- style (ui): corrige espa√ßamento ( n√£o deve haver espa√ßo entre o tipo e o escopo )
- chore:123 (n√£o deve come√ßar com n√∫meros ou caracteres especiais)

---

## Fluxo de Trabalho para Contribuir

### 1. Fa√ßa um Fork do Reposit√≥rio
Comece fazendo um fork do reposit√≥rio para sua conta no GitHub.

### 2. Clone o Reposit√≥rio
Clone o reposit√≥rio forkado para sua m√°quina local:
```bash
git clone https://github.com/seu-usuario/ProjetoWeb2.git
cd ProjetoWeb2
```

### 3. Crie uma Nova Branch
Crie uma nova branch a partir da `Dev` para sua funcionalidade ou corre√ß√£o:
```bash
git checkout dev
git pull origin dev
git checkout -b feature/nome-da-sua-funcionalidade
```

### 4. Fa√ßa Suas Altera√ß√µes
- Siga os padr√µes de codifica√ß√£o do projeto.
- Escreva mensagens de commit claras e concisas.
- Certifique-se de que seu c√≥digo esteja bem documentado e testado.

### 5. Teste Suas Altera√ß√µes
Execute os testes para garantir que suas altera√ß√µes n√£o quebrem funcionalidades existentes:
- **Backend**: Use os comandos Maven fornecidos.
- **Frontend**: Use `ng test` para executar os testes do Angular.

### 6. Fa√ßa o Commit e Envie
Fa√ßa o commit das suas altera√ß√µes e envie para o seu fork:
```bash
git add .
git commit -m "Adicione uma breve descri√ß√£o das suas altera√ß√µes"
git push origin feature/nome-da-sua-funcionalidade
```

### 7. Crie um Pull Request
Acesse o reposit√≥rio original e crie um pull request (PR) da sua branch para a branch `Dev`. Inclua:
- Um t√≠tulo claro e uma descri√ß√£o das suas altera√ß√µes.
- Capturas de tela ou refer√™ncias relevantes, se necess√°rio.

---

## Revis√£o de C√≥digo e Mesclagem

1. Seu PR ser√° revisado por um membro da equipe (@VictorPBilbao ou @AdrianoZS) caso esteja mergeando na branch `main` caso contr√°rio, voc√™ mesmo pode revisar!
2. Fa√ßa as altera√ß√µes solicitadas, se necess√°rio.
3. Ap√≥s a aprova√ß√£o, seu PR ser√° mesclado na branch `Dev`.
4. Ap√≥s testes adicionais, as altera√ß√µes na `Dev` ser√£o mescladas na `Main`.

---

## Notas Adicionais

- **Testes**: Certifique-se de que todos os testes passem antes de enviar seu PR. Al√©m disso, adicione testes unit√°rios para novas funcionalidades!!
- **Pipeline CI/CD**: Testes automatizados ser√£o executados para garantir a estabilidade.
- **Documenta√ß√£o**: Atualize a documenta√ß√£o relevante se suas altera√ß√µes afetarem a funcionalidade.

Obrigado por contribuir para o ByteAssist! üöÄ
